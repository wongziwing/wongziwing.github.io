<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wongziwing.github.io/</id>
    <title>ymq</title>
    <updated>2019-11-24T05:39:05.288Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wongziwing.github.io/"/>
    <link rel="self" href="https://wongziwing.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://wongziwing.github.io//images/avatar.png</logo>
    <icon>https://wongziwing.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, ymq</rights>
    <entry>
        <title type="html"><![CDATA[java之基本反射]]></title>
        <id>https://wongziwing.github.io//post/simple-reflection</id>
        <link href="https://wongziwing.github.io//post/simple-reflection">
        </link>
        <updated>2019-11-24T04:57:46.000Z</updated>
        <summary type="html"><![CDATA[<p>刚开始学spring,其中涉及到java反射的知识,就简单的总结一下反射的基本使用.</p>
]]></summary>
        <content type="html"><![CDATA[<p>刚开始学spring,其中涉及到java反射的知识,就简单的总结一下反射的基本使用.</p>
<!-- more -->
<h3 id="获取字节码的三种方法">获取字节码的三种方法</h3>
<pre><code>Class.forName(&quot;name&quot;);        //通过类名来获取
Name.class;
new Name().getClass();
</code></pre>
<h3 id="获取实例">获取实例</h3>
<pre><code>Class clazz = Class.forName(&quot;name&quot;);
 clazz.newInstance();    //获取无参实例
Constructor c = clazz.getConstructor(Strng.class,int.class);     //相同于占位符，表示有参数列表有String,int两个参数
Person p = (Person)c.newInstance(&quot;a&quot;,1);       //然后直接传参就ok
</code></pre>
<h3 id="获取类中字段">获取类中字段</h3>
<pre><code>Field f = Class.getFiled(&quot;name&quot;);     //获取类中name这个字段(可见的)
Field f2 = Class.getDeclredField(&quot;name&quot;);      //获得类中字段(不可见的),暴力反射
</code></pre>
<h3 id="设置类中字段">设置类中字段</h3>
<pre><code>***正常操作
f.set(p,&quot;tom&quot;);     //将p中的name字段的值修改为tom
***私有操作
f2.setAccessible(true);     //去除私有权限
f2.set(p,&quot;tom&quot;);
</code></pre>
<h3 id="获取运行类中的方法">获取运行类中的方法</h3>
<pre><code>Method m = clazz.getMethod(&quot;print&quot;);      //获取类中的方法
m.invoke(p);        //运行p中print方法
Method m2 = clazz.getMethod(&quot;print&quot;,param);     //获取带有参数的方法
m.invoke(p,&quot;hello&quot;);        //传入参数运行方法
</code></pre>
<blockquote>
<p>擦除ArrayList泛型(例子)</p>
</blockquote>
<pre><code>1、创建list对象
2、获取list对象的Class文件
3、获取list中的方法
4、运用invoke()方法添加数据

ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();
Class clazz = Class.forName(&quot;java.util.ArrayList&quot;);
Method m = clazz.getMethod(&quot;add&quot;,Object.class);     //获得ArrayList中带有一个参数的add方法
m.invoke(m,&quot;abc&quot;);      //就可以在list中加入String类型数据
</code></pre>
<blockquote>
<p>将反射操作封装成方法</p>
</blockquote>
<pre><code>/*
    @param:obj              要操作的对象
    @param:propertyName     改变字段名称
    @param:value            赋予字段的值
*/
public void setProperty(Object obj,String propertyName, Object value){
    
    Class clazz = obj.getClass();       //获取obj的字节码
    Filed f = clazz.getDeclaredField(propertyName);     //暴力反射obj对象中propertyName字段
    f.setAccessible(true);      //去除私有属性
    f.set(clazz,value);     //将propertyName属性赋值为value
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[huffmanTree]]></title>
        <id>https://wongziwing.github.io//post/huffmantree</id>
        <link href="https://wongziwing.github.io//post/huffmantree">
        </link>
        <updated>2019-11-07T14:12:34.000Z</updated>
        <summary type="html"><![CDATA[<p>前几天上课讲了huffmanTree树的实现原理<br>
现在有空就用代码简单实现一遍</p>
]]></summary>
        <content type="html"><![CDATA[<p>前几天上课讲了huffmanTree树的实现原理<br>
现在有空就用代码简单实现一遍</p>
<!-- more -->
<p>首先解释一遍实现huffmanTree基本思想<br>
1 将所有节点存入一个数组/链表中,从中找出两个最小值,并且组成一个新节点<br>
2 将上述中的两个最小值删除,将新节点加入数组/链表中<br>
3 重复1-2步骤,直到数组/链表剩下1个节点</p>
<p>定义一下Node节点属性<br>
<code>String data</code>     存放数据,可以使用泛型<br>
<code>int weight</code>      权重<br>
<code>Node leftNode</code>   左节点<br>
<code>Node rightNode</code>  右节点<br>
<code>String encode</code>   编码</p>
<p style="font-size:12px">构造huffmanTree</p>
<pre style="font-size:12px">
<pre><code>/**
 *
 * @param nodeList  存入一个node链表
 * @return          根节点
 */
public Node create(LinkedList&lt;Node&gt; nodeList){

    int len = nodeList.size();
    Collections.sort(nodeList);


    for (int i = 1; i &lt; len; i++){

        int index = 0;
        Node node1 = nodeList.remove(0);
        Node node2 = nodeList.remove(0);


        int newNodeWeight = node1.getWeight() + node2.getWeight();
        Node newnode = new Node(newNodeWeight);
        newnode.setLeftNode(node1);
        newnode.setRightNode(node2);
        newnode.setData(&quot;父节点&quot;);

        while (true){
            if (index == nodeList.size() || newnode.getWeight() &lt; nodeList.get(index).getWeight()){
                nodeList.add(index,newnode);
                break;
            }
            index++;
        }

    }

    return nodeList.get(0);
</code></pre>
<p>}</p>
</pre>
<hr/>
<h3>算法的思想:</h3><br/>
<p>
    先进行一遍排序,自然最小的两个数在0,1两个位置,删除头两个Node节点,并组成一个新节点,再用新节点从头开始比较,遇到比它大的数就停下来,自然也是有序的,最后返回一个根节点,就可以通过根节点对其他节点进行编码;
</p>
<p>对节点进行编码很简单,定义一下编码,记向左为0,向右为1,一直递归到左右都没有节点</p>
<pre>
<pre><code>/**
 *
 * @param node          根节点
 * @param leftcode      左节点编码
 * @param rightcode     右节点编码
 * @param code          初始的编码
 */
public void encode(Node node, String leftcode, String rightcode, String code){
    if (node.getLeftNode() != null){
        String temp = code + leftcode;
        encode(node.getLeftNode(), leftcode, rightcode, temp);
    }

    if (node.getRightNode() != null){
        String temp = code + rightcode;
        encode(node.getRightNode(), leftcode, rightcode, temp);
    }

    if (node.getLeftNode() == null || node.getRightNode() == null){
        node.setEncode(code);
    }


}
</code></pre>
</pre>
<hr/>
<p>最后再打印一下节点</p>
<pre>
<pre><code>/**
 *
 * @param root 树的根节点
 */
public void printAllNode(Node root){
    //先序遍历
    System.out.println(root.getData() + &quot; -&gt; &quot; + root.getEncode());
    if (root.getLeftNode() != null){
        printAllNode(root.getLeftNode());
    }
    if (root.getRightNode() != null){
        printAllNode(root.getRightNode());
    }

}
</code></pre>
</pre>
一棵简易的huffmanTree就完成了
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux控制台艺术字]]></title>
        <id>https://wongziwing.github.io//post/linux控制台艺术字</id>
        <link href="https://wongziwing.github.io//post/linux控制台艺术字">
        </link>
        <updated>2019-10-31T14:29:06.000Z</updated>
        <content type="html"><![CDATA[<h5>sudo apt-get install figlet</h5>
安装 figlet
<br/>
命令: figlet gg
<br/>
效果:
<pre>
  __ _  __ _ 
 / _` |/ _` |
| (_| | (_| |
 \__, |\__, |
 |___/ |___/ 
 </pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://wongziwing.github.io//post/hello-gridea</id>
        <link href="https://wongziwing.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>